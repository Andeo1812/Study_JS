//  Для работы кода в современном режиме
"use strict"


//  Операнд – то, к чему применяется оператор. Например, в умножении 5 * 2 есть два операнда:
//  левый операнд равен 5, а правый операнд равен 2. Иногда их называют «аргументами» вместо «операндов».

//  Унарным называется оператор, который применяется к одному операнду.
//  Например, оператор унарный минус "-" меняет знак числа на противоположный:
let x = 1;
x = -x;
alert(x); //  -1, применили унарный минус


//  Бинарным называется оператор, который применяется к двум операндам.
//  Тот же минус существует и в бинарной форме:
let z = 1, y = 3;
alert(y - z);  //   2, бинарный минус вычитает значения


//  Поддерживаются следующие математические операторы:
// Сложение +,
// Вычитание -,
// Умножение *,
// Деление /,
// Взятие остатка от деления %,
// Возведение в степень **.


//  Обратите внимание, если хотя бы один операнд является строкой, то второй будет также преобразован в строку.
alert('1' + 2);        //  "12"
alert(2 + '1');        //  "21"
alert(2 + 2 + '1');     // будет "41", а не "221"


//  Сложение и преобразование строк — это особенность бинарного плюса +.
//  Другие арифметические операторы работают только с числами и всегда преобразуют операнды в числа.
//  Например, вычитание и деление:
alert(6 - '2'); // 4, '2' приводится к числу
alert('6' / '2'); // 3, оба операнда приводятся к числам


//  Плюс + существует в двух формах: бинарной, которую мы использовали выше, и унарной.
//  Унарный, то есть применённый к одному значению, плюс + ничего не делает с числами.
//  Но если операнд не число, унарный плюс преобразует его в число.
// Не влияет на числа
let xx = 1;
alert(+xx);     // 1

let yy = -2;
alert(+yy);    // -2

// Преобразует не числа в числа
alert(+true);  // 1
alert(+"");    // 0
//  На самом деле это то же самое, что и Number(...), только короче.

let apples = "2";
let oranges = "3";
alert(apples + oranges);      // "23", так как бинарный плюс объединяет строки

//  Оба операнда предварительно преобразованы в числа
alert(+apples + +oranges);    // 5

//  Более длинный вариант
//  alert( Number(apples) + Number(oranges) );  //  5


//  Часть таблицы приоритетов
//  15	унарный плюс	        +
//  15	унарный минус	        -
//  14	возведение в степень	**
//  13	умножение	            *
//  13	деление	                /
//  12	сложение	            +
//  12	вычитание	            -


//  Краткие записи
let n = 2;
n += 5;     // теперь n = 7 (работает как n = n + 5)
n *= 2;     // теперь n = 14 (работает как n = n * 2)

alert(n); // 14


//  Инкремент/декремент
let counter = 2;
counter++;          // работает как counter = counter + 1, просто запись короче
alert(counter);   // 3

let counter_ = 2;
counter_--;         // работает как counter = counter - 1, просто запись короче
alert(counter_);  // 1

let counter__ = 1;
let a = ++counter__; // (*)
alert(a); // 2

let counter___ = 1;
let a_ = counter___++; // (*) меняем ++counter на counter++
alert(a_); // 1


//  Поддерживаются следующие побитовые операторы:
//  AND(и) ( & )
//  OR(или) ( | )
//  XOR(побитовое исключающее или) ( ^ )
//  NOT(не) ( ~ )
//  LEFT SHIFT(левый сдвиг) ( << )
//  RIGHT SHIFT(правый сдвиг) ( >> )
//  ZERO-FILL RIGHT SHIFT(правый сдвиг с заполнением нулями) ( >>> )


//  Оператор «запятая» (,) редко применяется и является одним из самых необычных.
//  Иногда он используется для написания более короткого кода, поэтому нам нужно знать его,
//  чтобы понимать, что при этом происходит.
//  Оператор «запятая» предоставляет нам возможность вычислять несколько выражений, разделяя их запятой ,.
//  Каждое выражение выполняется, но возвращается результат только последнего.
let b = (1 + 2, 3 + 4);

alert(b); // 7 (результат вычисления 3 + 4)
//  Первое выражение 1 + 2 выполняется, а результат отбрасывается.
//  Затем идёт 3 + 4, выражение выполняется и возвращается результат.


//  Еще примеры:
// "" + 1 + 0 = "10" // (1)
// "" - 1 + 0 = -1 // (2)
// true + false = 1
// 6 / "3" = 2
// "2" * "3" = 6
// 4 + 5 + "px" = "9px"
// "$" + 4 + 5 = "$45"
// "4" - 2 = 2
// "4px" - 2 = NaN
// "  -9  " + 5 = "  -9  5" // (3)
// "  -9  " - 5 = -14 // (4)
// null + 1 = 1 // (5)
// undefined + 1 = NaN // (6)
// " \t \n" - 2 = -2 // (7)
//  1 Сложение со строкой "" + 1 преобразует 1 к строке: "" + 1 = "1",
//  и в следующем случае "1" + 0 работает то же самое правило.
//  2 Вычитание - (как и большинство математических операторов) работает только с числами,
//  пустая строка "" приводится к 0.
//  3 Сложение со строкой превращает число 5 в строку и добавляет к строке.
//  4 Вычитание всегда преобразует к числу, значит строка " -9 " становится числом -9 (пробелы по краям обрезаются).
//  5 null становится 0 после численного преобразования.
//  6 undefined становится NaN после численного преобразования.
//  7 Пробельные символы, такие как \t и \n, по краям строки игнорируются при преобразовании в число,
//  так что строка " \t \n", аналогично пустой строке, становится 0 после численного преобразования.